#!/usr/bin/env python

import subprocess

# Trunk/main branch of project.
TRUNK = "master"

# C++ namespace for generated constexpr variables.
CC_NAMESPACE = "bf2mods::version"

def output(command):
    return subprocess.run(command, shell=True, capture_output=True, text=True, check=True).stdout.replace('\n', '')

# Class representation of Git version information
class GitInfo:
    def __init__(self):
        self.commit = output("git rev-parse --short HEAD")
        self.branch = output("git rev-parse --abbrev-ref HEAD")
        self.tag = output("git describe --tags --always --dirty=~")

        self.trunkBuild = self.branch == TRUNK or self.branch == "HEAD"
        self.dirty = self.tag.endswith('~')
        if self.dirty:
            self.commit += '~'
        self.hasTag = self.commit != self.tag

        self.fullTag = self.getVersionTag()

    # Get a version tag.
    def getVersionTag(self):
        out = ""

        if self.trunkBuild:
            # we don't care if this is just a commit or is actually a tag
            # if it's dirty it'll give itself the tilde and everything
            out += self.tag
        else:
            # we do care here, however
            if self.hasTag:
                out += f"{self.tag}{'' if self.dirty else '-'}"

            out += f"{self.commit}{'' if self.dirty else '-'}"
            out += self.branch

        return out

def main():
    info = GitInfo()
    with open('gitversion.h', "w+") as file:
        file.write(f"""
// Generated by gittag.py
// Do not edit!

#pragma once

#ifndef RC_INVOKED
namespace {CC_NAMESPACE} {{
    inline constexpr char commit[] = "{info.commit}";
    inline constexpr char branch[] = "{info.branch}";
    inline constexpr char tag[] = "{info.tag}";
    inline constexpr char fullTag[] = "{info.fullTag}";
    
    inline constexpr bool isDirty = {str(info.dirty).lower()};
    inline constexpr bool isTrunk = {str(info.trunkBuild).lower()};
}}
#endif

#define GIT_COMMIT "{info.commit}"
#define GIT_BRANCH "{info.branch}"
#define GIT_TAG "{info.tag}" 
#define GIT_FULL_TAG "{info.fullTag}"

#define GIT_IS_DIRTY {str(info.dirty).lower()}
#define GIT_IS_TRUNK {str(info.trunkBuild).lower()}
        """)


main()